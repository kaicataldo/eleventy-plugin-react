"use strict";

const { promises: fs } = require("fs");
const path = require("path");
const webpack = require("webpack");
const VirtualModulesPlugin = require("webpack-virtual-modules");
const hydrationCache = require("./hydrationCache");
const { APP_ROOT } = require("./constants");

const ENTRY_FILEPATH = path.resolve(
  APP_ROOT,
  "__eleventy-plugin-react__/assets/hydrated-components.js"
);
const COMPONENTS_LOADER_FILEPATH = path.resolve(
  APP_ROOT,
  "__eleventy-plugin-react__/assets/autogenerated-components-loader.js"
);

function generateComponentsLoader(components) {
  return `export default {${components
    .map(
      ({ componentName, modulePath }) =>
        `${componentName}() { return import("${modulePath}") }`
    )
    .join(",")}};`;
}

function promisifiedWebpack(config) {
  return new Promise((resolve, reject) => {
    webpack(config, (err, stats) => {
      if (err || stats.hasErrors()) {
        reject(err || new Error(stats.compilation.errors.join("\n\n")));
      }

      resolve(stats);
    });
  });
}

async function bundleClientAssets({
  babelConfig,
  outputPath,
  assetsPath,
} = {}) {
  const entryFileContents = await fs.readFile(
    path.resolve(__dirname, "../assets/hydrated-components.js"),
    "utf8"
  );
  const webpackConfig = {
    target: "web",
    mode: process.env.NODE_ENV === "development" ? "development" : "production",
    entry: ENTRY_FILEPATH,
    output: {
      filename: "[name].[contenthash].js",
      path: outputPath,
      publicPath: assetsPath.endsWith("/") ? assetsPath : `${assetsPath}/`,
    },
    plugins: [
      new VirtualModulesPlugin({
        [ENTRY_FILEPATH]: entryFileContents,
        [COMPONENTS_LOADER_FILEPATH]: generateComponentsLoader(
          hydrationCache.getComponents()
        ),
      }),
    ],
    resolve: {
      extensions: [".js", ".jsx", ".ts", "tsx"],
    },
    module: {
      rules: [
        {
          test: /\.[jt]sx?$/,
          exclude: /node_modules\/!(eleventy-plugin-react)/,
          use: [
            {
              loader: require.resolve("babel-loader"),
              options: {
                root: APP_ROOT,
                babelrc: false,
                ...babelConfig,
              },
            },
          ],
        },
      ],
    },
    stats: "errors-only",
    optimization: {
      splitChunks: {
        cacheGroups: {
          vendor: {
            test: /node_modules/,
            name: "vendor",
            chunks: "all",
            enforce: true,
          },
        },
      },
    },
  };

  try {
    const stats = await promisifiedWebpack(webpackConfig);
    return stats;
  } catch (e) {
    console.error("Bundling of hydrated components failed.");
    throw e;
  } finally {
    hydrationCache.flush();
  }
}

module.exports = {
  bundleClientAssets,
};
