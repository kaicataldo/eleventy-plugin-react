"use strict";

const path = require("path");
const webpack = require("webpack");
const VirtualModulesPlugin = require("webpack-virtual-modules");
const hydrationCache = require("./hydrationCache");
const { PACKAGE_ROOT, APP_ROOT } = require("./constants");
const { resolveFromDir } = require("./moduleUtils");

const ENTRY_FILEPATH = path.resolve(
  PACKAGE_ROOT,
  "assets/hydrated-components.js"
);
const COMPONENTS_MAP_FILEPATH = path.resolve(
  PACKAGE_ROOT,
  "assets/autogenerated-components-map.js"
);

function generateComponentsFile(components) {
  return components
    .map(
      ({ componentName, modulePath }) =>
        `export { default as ${componentName} } from "${modulePath}"`
    )
    .join("\n");
}

function promisifiedWebpack(config) {
  return new Promise((resolve, reject) => {
    console.info("Beginning bundling of hydrated components.");
    webpack(config, (err, stats) => {
      if (err || stats.hasErrors()) {
        reject(err);
      }

      if (stats.hasWarnings()) {
        const info = stats.toJson();
        console.warn(info.warnings);
      }

      console.info(stats.toString());
      resolve(stats.hash);
    });
  });
}

async function bundleClientAssets({ targets, outputPath } = {}) {
  const webpackConfig = {
    target: "web",
    mode: process.env.NODE_ENV === "development" ? "development" : "production",
    entry: ENTRY_FILEPATH,
    context: APP_ROOT,
    output: {
      filename: "hydrated-components-[hash].js",
      path: outputPath,
    },
    plugins: [
      new VirtualModulesPlugin({
        [COMPONENTS_MAP_FILEPATH]: generateComponentsFile(
          hydrationCache.getComponents()
        ),
      }),
    ],
    resolve: {
      alias: {
        react: resolveFromDir("react", APP_ROOT),
        "react-dom": resolveFromDir("react-dom", APP_ROOT),
      },
    },
    module: {
      rules: [
        {
          test: /\.jsx?$/,
          exclude: /node_modules/,
          use: {
            loader: resolveFromDir("babel-loader", PACKAGE_ROOT),
            options: {
              cwd: PACKAGE_ROOT,
              babelrc: false,
              presets: [
                "@babel/preset-react",
                [
                  "@babel/preset-env",
                  {
                    targets,
                    modules: false,
                  },
                ],
              ],
            },
          },
        },
      ],
    },
  };

  try {
    const hash = await promisifiedWebpack(webpackConfig);
    return hash;
  } catch (e) {
    console.error("Bundling of hydrated components failed.");
    throw e;
  } finally {
    hydrationCache.flush();
  }
}

module.exports = {
  bundleClientAssets,
};
