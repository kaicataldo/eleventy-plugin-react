import "regenerator-runtime/runtime";
import "core-js";
import React from "react";
import ReactDOM from "react-dom";
import componentsLoader from "./autogenerated-components-loader";

(async () => {
  const componentCache = {
    _cache: new Map(),

    async get(name) {
      if (this._cache.has(name)) {
        return this._cache.get(name).default;
      }

      const component = await componentsLoader[name]();
      this._cache.set(name, component);

      return component.default;
    },
  };

  const markers = (function generateHydrationMarkersMap() {
    const markerHeaderSubstring = "__ELEVENTY_REACT_HYDRATION_MARKER__:";
    const nodeIterator = document.createNodeIterator(
      document.body,
      NodeFilter.SHOW_COMMENT,
      {
        acceptNode(node) {
          return node.textContent.startsWith(markerHeaderSubstring)
            ? NodeFilter.FILTER_ACCEPT
            : NodeFilter.FILTER_REJECT;
        },
      }
    );
    const markers = {};
    let currentNode;

    while ((currentNode = nodeIterator.nextNode())) {
      let data;
      try {
        const rawJSON = currentNode.textContent.replace(
          markerHeaderSubstring,
          ""
        );
        data = JSON.parse(rawJSON);
      } catch {
        console.error("Unable to parse JSON data");
      }

      if (!markers[data.id]) {
        markers[data.id] = {};
      }

      markers[data.id][data.loc] = {
        node: currentNode,
        data,
      };
    }

    return markers;
  })();

  await Promise.all(
    Object.values(markers).map(async ({ start, end }) => {
      const { componentName, props: serializedProps } = start.data;
      const Component = await componentCache.get(componentName);
      const startMarkerNode = start.node;
      const endMarkerNode = end.node;
      const componentNodes = [];

      let nodeToCheck = startMarkerNode.nextSibling;
      while (nodeToCheck !== endMarkerNode) {
        componentNodes.push(nodeToCheck);
        nodeToCheck = nodeToCheck.nextSibling;
      }

      // Hydrate the Component in a separate container in case it has siblings.
      const containerEl = document.createElement("div");
      containerEl.append(...componentNodes);

      const props = JSON.parse(serializedProps);
      ReactDOM.hydrate(<Component {...props} />, containerEl);

      startMarkerNode.replaceWith(...containerEl.children);
      containerEl.remove();
      endMarkerNode.remove();
    })
  );
})().catch((err) =>
  console.error(
    `Could not hydrate interactive components. Error: ${err.message}`
  )
);
