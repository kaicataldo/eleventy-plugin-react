import "regenerator-runtime/runtime";
import "core-js";
import React from "react";
import ReactDOM from "react-dom";
import componentsLoader from "./autogenerated-components-loader";

(async () => {
  const componentCache = {
    _cache: new Map(),

    async get(name) {
      if (this._cache.has(name)) {
        return this._cache.get(name).default;
      }

      const component = await componentsLoader[name]();
      this._cache.set(name, component);

      return component.default;
    },
  };

  await Promise.all(
    Array.from(document.querySelectorAll("[data-hydration-start-id]")).map(
      async (markerEl) => {
        const id = markerEl.getAttribute("data-hydration-start-id");
        const props = markerEl.getAttribute("data-hydration-props");
        const componentName = markerEl.getAttribute(
          "data-hydration-component-name"
        );
        const endMarkerEl = document.querySelector(
          `[data-hydration-end-id="${id}"]`
        );
        const componentEls = [];

        if (markerEl === endMarkerEl) {
          componentEls.push(markerEl);
        } else {
          let elToCheck = markerEl.nextElementSibling;

          while (elToCheck !== endMarkerEl) {
            componentEls.push(elToCheck);
            elToCheck = elToCheck.nextElementSibling;
          }
        }

        // Hydrate the Component in a separate container in case it has siblings.
        const Component = await componentCache.get(componentName);
        const containerEl = document.createElement("div");
        containerEl.append(...componentEls);
        ReactDOM.hydrate(<Component {...JSON.parse(props)} />, containerEl);
        markerEl.replaceWith(...containerEl.children);
        containerEl.remove();
      }
    )
  );
})();
